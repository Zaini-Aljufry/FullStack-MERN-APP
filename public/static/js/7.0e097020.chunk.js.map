{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","auth","useContext","AuthContext","useHttpClient","isLoading","ErrorMsg","sendRequest","clearError","history","useHistory","useState","showMap","setShowMap","showDel","setShowDel","closeMapHandler","cancelDelHandler","confirmDelHandler","a","process","id","token","onDelete","push","userId","Fragment","ErrorModal","error","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","creatorId","to","PlaceList","items","length","place","key","creator","location","UserPlaces","loadedPlaces","setLoadedPlaces","UserId","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.0e097020.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from \"react\";\r\n\r\nimport './Map.css'\r\n\r\nconst Map = (props) => {\r\n  const mapRef = useRef();\r\n\r\n  const { center, zoom } = props;\r\n\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n      center: center,\r\n      zoom: zoom,\r\n    });\r\n\r\n    new window.google.maps.Marker({ position: center, map: map });\r\n  }, [center, zoom]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapRef}\r\n      className={`map ${props.className}`}\r\n      style={props.style}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React, { useState,useContext } from \"react\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport Map from '../../shared/components/UIElements/Map';\r\nimport { AuthContext } from '../../shared/components/context/auth-context';\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport {useHistory } from \"react-router-dom\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nimport \"./PlaceItem.css\";\r\n\r\nconst PlaceItem = (props) => {\r\n  const auth = useContext(AuthContext)\r\n  const { isLoading, ErrorMsg, sendRequest, clearError } = useHttpClient();\r\n  const history = useHistory();\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showDel,setShowDel] = useState(false)\r\n\r\n  const openMapHandler = () => setShowMap(true);\r\n\r\n  const closeMapHandler = () => setShowMap(false);\r\n\r\n  const showDelHandler = () => setShowDel(true);\r\n\r\n  const cancelDelHandler = () => setShowDel(false);\r\n\r\n  const confirmDelHandler = async () => {\r\n    setShowDel(false)\r\n    try {\r\n      await sendRequest(\r\n       `${process.env.REACT_APP_BACKEND_URL}/places/${props.id}`,'DELETE',null,{\r\n         'Authorization': 'Bearer ' + auth.token\r\n       }\r\n     );\r\n     props.onDelete(props.id);\r\n     history.push(`/${auth.userId}/places`)\r\n   } catch (err) {}\r\n    \r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n    <ErrorModal error={ErrorMsg} onClear={clearError}/>\r\n      <Modal\r\n        show={showMap}\r\n        onCancel={closeMapHandler}\r\n        header={props.address}\r\n        contentClass=\"place-item__modal-content \"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={closeMapHandler}>Close</Button>}\r\n      >\r\n      <div className=\"map-container\">\r\n        <Map center={props.coordinates} zoom={16}/>\r\n      </div>\r\n      </Modal>\r\n      <Modal show={showDel} onCancel={cancelDelHandler} header=\"Are you sure?\" footerClass=\"place-item__modal-actions\" footer={(\r\n        <React.Fragment>\r\n          <Button inverse onClick={cancelDelHandler}>Cancel</Button>\r\n          <Button danger onClick={confirmDelHandler}>Delete</Button>\r\n        </React.Fragment>\r\n      )}>\r\n        <p>Do you want to proceed?</p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n        {isLoading && <LoadingSpinner asOverlay/>}\r\n          <div className=\"place-item__image\">\r\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick={openMapHandler}>View on Map</Button>\r\n            {auth.userId === props.creatorId &&\r\n            <Button to={`/places/${props.id}`}>Edit</Button>}\r\n            {auth.userId === props.creatorId &&\r\n            <Button danger onClick={showDelHandler}>Delete</Button>}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from \"react\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport PlaceItem from \"./PlaceItem\";\r\nimport Button from '../../shared/components/FormElements/Button'\r\n\r\n\r\nimport \"./PlaceList.css\";\r\n\r\nconst PlaceList = (props) => {\r\n  \r\n  if (!props.items.length) {\r\n    return (\r\n      <div className=\"place-list center\">\r\n        <Card>\r\n          <h2>No Places Found, Maybe create one?</h2>\r\n          <Button to=\"/places/new\">Share Place</Button>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <ul className=\"place-list\">\r\n      {props.items.map((place) => (\r\n        <PlaceItem\r\n          key={place.id}\r\n          id={(place.id)}\r\n          image={place.image}\r\n          title={place.title}\r\n          description={place.description}\r\n          address={place.address}\r\n          creatorId={place.creator}\r\n          coordinates={place.location}\r\n          onDelete={props.onDelete}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PlaceList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\n\r\nconst UserPlaces = () => {\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, ErrorMsg, sendRequest, clearError } = useHttpClient();\r\n  const UserId = useParams().userId;\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${UserId}`\r\n        );\r\n\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    };\r\n\r\n    fetchPlaces();\r\n  }, [sendRequest, UserId]);\r\n\r\n  const onDeleteHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces((prevPlaces) =>\r\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={ErrorMsg} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && (\r\n        <PlaceList items={loadedPlaces} onDelete={onDeleteHandler} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}